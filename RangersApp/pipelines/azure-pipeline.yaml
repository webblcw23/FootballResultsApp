trigger: none

#schedules:
#  - cron: "0 9 * * 1"
#    displayName: Weekly Rangers Infra Check
#    always: true
#    branches:
#      include:
#        - main

pool:
  vmImage: "ubuntu-latest"

variables:
  ACR_NAME: "rangers-docker-acr"
  IMAGE_NAME: "rangersapp"
  DOCKER_IMAGE: "$(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest"

stages:
  - stage: TerraformInfra
    displayName: "üîß Provision Infrastructure"
    jobs:
      - job: Terraform
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: "1.7.5"

          - script: terraform init -reconfigure
            workingDirectory: "RangersApp/terraform"
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
            displayName: "Terraform Init"

          - script: terraform validate
            workingDirectory: "RangersApp/terraform"
            displayName: "Terraform Validate"

          - script: |
              echo "Client ID is: $(ARM_CLIENT_ID)"
              echo "ARM TENANT ID is: $(ARM_TENANT_ID)"
              echo "ARM SUB ID is: $(ARM_SUBSCRIPTION_ID)"
            displayName: "Check Vars"

          - script: |
              terraform plan \
                -out=tfplan.out \
                -var="client_id=$(ARM_CLIENT_ID)" \
                -var="client_secret=$(ARM_CLIENT_SECRET)" \
                -var="subscription_id=$(ARM_SUBSCRIPTION_ID)" \
                -var="tenant_id=$(ARM_TENANT_ID)"
            workingDirectory: "RangersApp/terraform"
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
            displayName: "Terraform Plan"

          - publish: RangersApp/terraform/tfplan.out
            artifact: terraform-plan
            displayName: "Publish Terraform Plan"

          - script: terraform apply -auto-approve tfplan.out
            workingDirectory: "RangersApp/terraform"
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
            displayName: "Terraform Apply"

  - stage: BuildAndScrape
    displayName: "‚öôÔ∏è Build App & Scrape Data"
    dependsOn: TerraformInfra
    jobs:
      - job: BuildScrape
        steps:
          - task: DotNetCoreCLI@2
            displayName: "Restore RangersApp"
            inputs:
              command: "restore"
              projects: "RangersApp/Rangers.Web.csproj"

          - task: DotNetCoreCLI@2
            displayName: "Build RangersApp"
            inputs:
              command: "build"
              projects: "RangersApp/Rangers.Web.csproj"
              arguments: "--configuration Release"

          - task: DotNetCoreCLI@2
            displayName: "Test RangersApp"
            inputs:
              command: "test"
              projects: "RangersApp/Rangers.Web.csproj"

          - task: UsePythonVersion@0
            displayName: "Setting Python Version"
            inputs:
              versionSpec: "3.10"
              addToPath: true

          - script: |
              python -m venv venv
              source venv/bin/activate
              pip install pandas
              python Data/scrape_scores.py
            workingDirectory: "RangersApp"
            displayName: "Run Python Script to Scrape Scores"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: "RangersApp/Data/rangers-results.json"
              artifactName: "rangers-results"
            displayName: "Publish Results JSON"

  - stage: DockerPush
    displayName: "üê≥ Build & Push Docker Image"
    dependsOn: BuildAndScrape
    jobs:
      - job: DockerBuild
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Updated Results Artifact"
            inputs:
              buildType: 'current'
              downloadPath: 'RangersApp/Data'
              artifactName: 'rangers-results'

          - script: mv RangersApp/Data/rangers-results/rangers-results.json RangersApp/Data/rangers-results.json
            displayName: "Move JSON to Expected Path"

          - script: cat RangersApp/Data/rangers-results.json
            displayName: "Verify JSON After Move"

          - task: Docker@2
            displayName: "Build and Push Docker Image"
            inputs:
              containerRegistry: "rangers-docker-acr"
              repository: "$(IMAGE_NAME)"
              command: "buildAndPush"
              Dockerfile: "RangersApp/Dockerfile"
              buildContext: "RangersApp"
              tags: |
                latest
                $(Build.BuildId)

  - stage: DeployApp
    displayName: "üöÄ Restart Web App"
    dependsOn: DockerPush
    jobs:
      - job: Restart
        steps:
          - task: AzureCLI@2
            displayName: "Restart Rangers Web App"
            inputs:
              azureSubscription: "rangers-acr-service-connection"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az webapp restart \
                --name rangers-webapp \
                --resource-group rg-rangers-app
