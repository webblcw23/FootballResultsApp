trigger: none

schedules:
  - cron: "0 9 * * 1"  # Every Monday at 9am
    displayName: "Weekly scrape and deploy"
    branches:
      include:
        - main
    always: true
    
pool:
    vmImage: "ubuntu-latest"

variables:
  ACR_NAME: "rangersdockeracr"
  IMAGE_NAME: "rangersapp"
  DOCKER_REGISTRY: "$(ACR_NAME).azurecr.io"
  IMAGE_TAG_DEV: "dev-001"
  IMAGE_TAG_STAGING: "staging-001"
  IMAGE_TAG_PROD: "prod-001"

stages:
  - stage: BuildAndScrape
    displayName: "‚öôÔ∏è Build App & Scrape Data"
    jobs:
      - job: BuildScrape
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.10"
              addToPath: true

          - script: |
              python -m venv venv
              source venv/bin/activate
              pip install pandas
              python Data/scrape_scores.py
            displayName: "Scrape Latest Match Results"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: "Data/rangers-results.json"
              artifactName: "rangers-results"
            displayName: "Publish Results JSON"

  - stage: DockerPush
    displayName: "üê≥ Build & Push Docker Image"
    dependsOn: BuildAndScrape
    jobs:
      - job: DockerBuild
        steps:
        
          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: "rangers-results"
              downloadPath: "Data"

          - script: mv Data/rangers-results/rangers-results.json Data/rangers-results.json
            displayName: "Move JSON to Expected Path"

          - task: Docker@2
            displayName: "Build and Push Docker Image with Multiple Tags"
            inputs:
              containerRegistry: "rangers-docker-acr"  # Your ACR service connection name
              repository: "$(IMAGE_NAME)"
              command: "buildAndPush"
              Dockerfile: "Dockerfile"
              buildContext: "."
              tags: |
                $(IMAGE_TAG_DEV)
                $(IMAGE_TAG_STAGING)
                $(IMAGE_TAG_PROD)


  - stage: DeployDev
    displayName: "üöÄ Deploy to Dev Environment"
    dependsOn: DockerPush
    jobs:
      - job: TerraformDev
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: "1.7.5"

          - script: terraform init -reconfigure
            workingDirectory: "terraform/dev"

          - script: terraform apply -auto-approve \
              -var="image_tag=$(IMAGE_TAG_DEV)"
            workingDirectory: "terraform/dev"

          - task: AzureCLI@2
            displayName: "Restart Dev Web App"
            inputs:
              azureSubscription: "rangers-arm-service-connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az webapp restart --name rangers-webapp-dev --resource-group rg-rangers-dev

  - stage: DeployStaging
    displayName: "üö¶ Deploy to Staging Environment"
    dependsOn: DeployDev
    condition: succeeded()
    jobs:
      - job: TerraformStaging
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: "1.7.5"

          - script: terraform init -reconfigure
            workingDirectory: "terraform/staging"

          - script: terraform apply -auto-approve \
              -var="image_tag=$(IMAGE_TAG_STAGING)"
            workingDirectory: "terraform/staging"

          - task: AzureCLI@2
            displayName: "Restart Staging Web App"
            inputs:
              azureSubscription: "rangers-arm-service-connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az webapp restart --name rangers-webapp-staging --resource-group rg-rangers-staging

  - stage: DeployProd
    displayName: "‚úÖ Deploy to Production Environment"
    dependsOn: DeployStaging
    condition: succeeded()
    jobs:
      - job: TerraformProd
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: "1.7.5"

          - script: terraform init -reconfigure
            workingDirectory: "terraform/prod"

          - script: terraform apply -auto-approve \
              -var="image_tag=$(IMAGE_TAG_PROD)"
            workingDirectory: "terraform/prod"

          - task: AzureCLI@2
            displayName: "Restart Prod Web App"
            inputs:
              azureSubscription: "rangers-arm-service-connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az webapp restart --name rangers-webapp-prod --resource-group rg-rangers-prod
